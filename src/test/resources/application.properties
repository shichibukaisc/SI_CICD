##########
# Applicaiton Specific properties
##########
#contextRoot=/skeleton
server.servlet.context-path=/skeleton
#host.name will be overwritten by the container environments
hostname=localhost
application.version=v1
application.name=Spring Boot REST API Skeleton
application.acronym=SBRAS
application.environment=LCL
application.clientId.dataLoader.folderPath=/data/clients

example.name=My Example Name
example.value=My Example Value

##########
# Applicaiton Swagger Documentation values
##########
application.swagger.info.title=${application.name}
application.swagger.info.description=This is my application description
application.swagger.info.name=${application.name}

application.swagger.license.name=Application License Name (update properties file)
application.swagger.license.url=Application URL (update properties file)

application.swagger.contact.name=Contact Name (Update Properties File)
application.swagger.contact.url=Contact URL (Update Properties File)
application.swagger.contact.email=Contact Email (Update Properties File)

application.swagger.termsOfService=https://www.alberta.ca/terms-of-service-url

application.swagger.externalDocumentation.description=External Documentation description (update properties file)
application.swagger.externalDocumentation.url=External Docs url (update properties file)
#The list of swagger servers that are displayed when trying the 'try it out'.  this is a comma
#seperated list of full uris.  The first uri is the default
application.swagger.servers=http://localhost:8080/skeleton,https://apidev.gov.ab.ca/dev/skeleton,https://apiuat.gov.ab.ca/uat/skeleton,https://apiuat.gov.ab.ca/dev/skeleton

##########
# OIDC related settings
##########
# The auth server
oidc.authentication.server=https://idpdev.gov.ab.ca
# The realm the client is in
oidc.realm=TestRealm
# The JWKS Url used to validate submitted Bearer Tokens
oidc.jwks.uri=${oidc.authentication.server}/auth/realms/${oidc.realm}/protocol/openid-connect/certs
# The token Url used to retrieve access tokens
oidc.token.uri=${oidc.authentication.server}/auth/realms/${oidc.realm}/protocol/openid-connect/token
# The OIDC .well-known
oidc.well-known.uri=${oidc.authentication.server}/auth/realms/${oidc.realm}/.well-known/openid-configuration

##########
# Spring Security settings
##########
spring.security.oauth2.resourceserver.jwt.issuer-uri=${oidc.authentication.server}/auth/realms/${oidc.realm}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${oidc.authentication.server}/auth/realms/${oidc.realm}/openid-connect/certs
spring.security.oauth2.resourceserver.jwt.jws-algorithm=RS256,HS256
# coming in spring boot 2.7.0 ~May 2022
#spring.security.oauth2.resourceserver.jwt.audience=sbras-lcl
subscriptionAudience=sbras-lcl
spring.security.custom.whitelist=${swagger.whitelist.paths},${management.endpoints.web.path-mapping.health},/v1/public/**
#This method determines where the user authority comes	from.  There are 2 valid values: access-token and in-memory
#access-token -> Uses the resource_access claim in the access token.  It matches the service audience and then maps the roles to granted authorities
#in-memory -> Uses the LoginUserDetailsService to find the granted Authorities of the user based off the azp token (authorized party - which is the clientId) and the services audience. 
application.oidc.authorizationMethod=in-memory
#application.oidc.authorizationMethod=access-token


##########
# H2 Related Configurations
##########


# H2 In-Memory DB settings
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.driverClassName=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.defer-datasource-initialization=true

# PostgreSQL DB settings - We don't use this currently and most likely won't in the future either
#spring.datasource.url=jdbc:postgresql:subscriptions
#spring.datasource.username=postgres
#spring.datasource.password=Welcome
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

spring.jpa.hibernate.ddl-auto=none
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.show-sql=true


##########
# Server Settings
##########
server.port=8080
server.error.include-message=always
server.error.include-binding-errors=always

##########
# RESTful API debugging settings.  For PROD, some of these shoudl be set to INFO
##########
logging.level.org.springframework.web.client.RestTemplate=DEBUG
logging.level.org.apache.http=DEBUG
logging.level.httpclient.wire=DEBUG
logging.level.ca.alberta.services=DEBUG
# The only environment that will be different than this locaiton will be on local windows machines.  Also, in the openshift environment, host.name will be the pod name.
# This will enable us to uniquely identify the pod generating the logs.  This might be a problem in terms of log cleanup..
logging.file.name=/logs/${application.acronym}-${application.environment}-${hostname}.log

##########
# Swagger Configs
##########
swaggerRoot=/swagger
# Customize the ui and api-docs endpoint to be after the swagger root.
# Overriding this value will require updateding the SecurityConfiguration to whitelist that endpoint.
# This allows the API gateway to allow non-authorized access to specific endpoints
springdoc.swagger-ui.path=${swaggerRoot}/docs
springdoc.api-docs.path=${swaggerRoot}/api-docs
springdoc.show-actuator=false
#swagger.whitelist.paths=${springdoc.swagger-ui.path},${springdoc.api-docs.path}/**,${springdoc.api-docs.path},/favicon.ico,${swaggerRoot}/swagger-ui/**
swagger.whitelist.paths=/,${swaggerRoot}/**,/favicon.ico

##########
# Other
##########
# Throw a generic exception if no exception handler is found
spring.mvc.throw-exception-if-no-handler-found=true
# Disable static resource handling
spring.web.resources.add-mappings=false

##########
# actuator Config
##########
management.endpoints.enabled-by-default=false
management.endpoint.health.enabled=true
management.endpoint.health.show-details=when-authorized
management.endpoint.health.roles=ROLE_SBRAS_ADMIN
management.endpoint.shutdown.enabled=true
#Explicitly exclude all jmx endpoints
management.endpoints.jmx.exposure.exclude=*
#Explicitly exclude all web endpoints
#management.endpoints.web.exposure.exclude=*
management.endpoints.web.exposure.include=health,shutdown
#Explicitly include health and shutdown
#management.endpoints.jmx.exposure.include=health,shutdown
management.endpoints.web.base-path=/
management.endpoints.web.path-mapping.health=/health
management.endpoints.web.path-mapping.shutdown=/shutdown

management.health.diskspace.enabled=false
